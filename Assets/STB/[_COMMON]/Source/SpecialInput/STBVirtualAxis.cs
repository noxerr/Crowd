using System;
using UnityEngine;
using STB.SpecialInput.PlatformSpecific;

namespace STB.SpecialInput
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// Class: STBVirtualAxis
    /// # virtual axis and button classes - applies to mobile input
    /// # Can be mapped to touch joysticks, tilt, gyro, etc, depending on desired implementation.
    /// # Could also be implemented by other input devices - kinect, electronic sensors, etc
    /// </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public class STBVirtualAxis
    {
        // public
        public string name { get; private set; }
        public bool matchWithInputManager { get; private set; }

        // private
        float m_Value;


        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// STBVirtualAxis
        /// </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public STBVirtualAxis(string name) : this(name, true)
        {
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// STBVirtualAxis
        /// </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public STBVirtualAxis(string name, bool matchToInputSettings)
        {
            this.name = name;
            matchWithInputManager = matchToInputSettings;
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Remove
        /// # removes an axes from the cross platform input system
        /// </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public void Remove()
        {
            STBCrossPlatformInputManager.UnRegisterSTBVirtualAxis(name);
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Update
        /// # a controller gameobject (eg. a virtual thumbstick) should update this class
        /// </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public void Update(float value)
        {
            m_Value = value;
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// GetValue
        /// </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public float GetValue
        {
            get { return m_Value; }
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// GetValueRaw
        /// </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public float GetValueRaw
        {
            get { return m_Value; }
        }
    }
}
