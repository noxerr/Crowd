using UnityEngine;
using System.Collections;
using System.Collections.Generic;

namespace STB.Generic
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// Class: GenericEnemyBase
    /// # 
    /// </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public class GenericEnemyBase : MonoBehaviour
    {
        // static -- to access from other classes 
        static List<GenericEnemyBase> enemyList = new List<GenericEnemyBase>();

        // public
        public float detectionDistance = 50;
        public float damageWhenAttack = 10;
        public float respawnTime = 6;

        // protected
        protected GenericWeaponBase lastGenericWeaponBase = null;


        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Awake
        /// </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void Awake()
        {
            enemyList.Add(this);


            AwakeExtended();
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// EnemyList
        /// </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public static List<GenericEnemyBase> EnemyList
        {
            get { return enemyList; }
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// OnDestroy
        /// When the scene changes some static variables need to be restarted
        /// </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void OnDestroy()
        {
            //Debug.Log ("OnDestroy");		
            enemyList.Clear();
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// GetShooted
        /// # Get shooted by something or someone
        /// </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public void GetShooted(GenericWeaponBase actualWeapon, Vector3 o, Vector3 p, float strikeSpeed, float lifeDamage, string zone)
        {
            //Debug.Log("GetShooted: " + actualWeapon + " in " + zone);

            if (actualWeapon) lastGenericWeaponBase = actualWeapon;

            GetShootedExtended(actualWeapon, o, p, strikeSpeed, lifeDamage);
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// GetExplosionExtraForceAllowed
        /// </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public bool GetExplosionExtraForceAllowed()
        {
            if (!lastGenericWeaponBase)
            {
                Debug.Log("There is no lastGenericWeaponBase");

                return false;
            }

            return lastGenericWeaponBase.ExplosionExtraForceAllowed;
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// AwakeExtended -- VIRTUAL
        /// </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        protected virtual void AwakeExtended()
        {
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// GetDead -- VIRTUAL
        /// # Get if the character is dead or not
        /// </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool GetDead()
        {
            return false;
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// GetShootedExtended -- VIRTUAL
        /// # Get shooted by something or someone
        /// </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        protected virtual void GetShootedExtended(GenericWeaponBase actualWeapon, Vector3 o, Vector3 p, float strikeSpeed, float lifeDamage)
        {
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// GetCanBeRespawned -- VIRTUAL
        /// # 
        /// </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool GetCanBeRespawned()
        {
            return true;
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Resurrect -- VIRTUAL
        /// # Resurrect character
        /// </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual void Resurrect(Vector3 position)
        {
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// SetKillerBehaviour -- VIRTUAL
        /// # Kill character
        /// </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual void SetKillerBehaviour()
        {

        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Kill -- VIRTUAL
        /// # Kill character
        /// </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual void Kill(GenericWeaponBase actualWeapon, Vector3 o, Vector3 p, float strikeSpeed, bool forceEnemyExplosion)
        {
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// SetGeneralTarget -- VIRTUAL
        /// # Set a permanent target and the time before enemy takes player as new target
        /// </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual void SetGeneralTarget(bool hasGT, Vector3 target, float t)
        {
        }
    }
}
